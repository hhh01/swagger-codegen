{{>licenseInfo}}
{{#operations}}

#include "{{classname}}.h"

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

{{classname}}::{{classname}}()
{
    setupRoutes();
};

void {{classname}}::setupRoutes() {
    using namespace iovnet::service::Rest;

    {{#operation}}
    Routes::{{httpMethod}}(control_router, base + "{{{vendorExtensions.x-codegen-iovnet-router-path}}}", Routes::bind(&{{classname}}::{{operationIdSnakeCase}}_handler, this));
    {{/operation}}
}

{{#operation}}
void {{classname}}::{{operationIdSnakeCase}}_handler(const iovnet::service::Rest::Request &request, iovnet::service::HttpHandleResponse &response) {
    {{#hasPathParams}}
    // Getting the path params
    {{#pathParams}}
    auto {{paramName}} = request.param(":{{paramName}}").as<{{dataType}}>();
    {{/pathParams}}
    {{/hasPathParams}}
    {{#hasBodyParam}}
    // Getting the body param
    {{#bodyParam}}
    {{^isPrimitiveType}}
    {{baseType}} {{paramName}};{{/isPrimitiveType}}
    {{#isPrimitiveType}}
    {{dataType}} {{paramName}};
    {{/isPrimitiveType}}
    {{/bodyParam}}
    {{/hasBodyParam}}

    try {
    {{#hasBodyParam}}
    {{#bodyParam}}
      if (request.is_help()) {
    {{^isPrimitiveType}}
        response.send(iovnet::service::Http::Code::Ok, {{paramName}}.getHelpJsonString());
    {{/isPrimitiveType}}
    {{#isPrimitiveType}}
        nlohmann::json val = nlohmann::json::object();
        val["{{baseName}}"]["baseName"] = "{{baseName}}";
        val["{{baseName}}"]["isListContainer"] = {{isListContainer}};
        val["{{baseName}}"]["required"] = {{required}};
        val["{{baseName}}"]["description"] = "{{description}}";
        val["{{baseName}}"]["isPrimitiveType"] = {{isPrimitiveType}};
        val["{{baseName}}"]["defaultValue"] = "{{defaultValue}}";
        val["{{baseName}}"]["example"] = "{{example}}";
        val["{{baseName}}"]["isString"] = {{isString}};
        val["{{baseName}}"]["isInteger"] = {{isInteger}};
        val["{{baseName}}"]["isBoolean"] = {{isBoolean}};
        response.send(iovnet::service::Http::Code::Ok, val.dump(4));
    {{/isPrimitiveType}}
        return;
      } else {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    {{^isPrimitiveType}}
      {{paramName}}.fromJson(request_body);{{/isPrimitiveType}}
    {{#isPrimitiveType}}
      // The conversion is done automatically by the json library
      {{paramName}} = request_body;
    {{/isPrimitiveType}}
      }
    {{/bodyParam}}
    {{/hasBodyParam}}

      {{operationIdSnakeCase}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(iovnet::service::Http::Code::Bad_Request, e.what());
      return;
    }
}

{{/operation}}

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
