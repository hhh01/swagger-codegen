{{>licenseInfo}}
{{#operations}}

#include "{{classname}}.h"

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

{{classname}}::{{classname}}() {
    setupRoutes();
};

void {{classname}}::setupRoutes() {
    using namespace iovnet::service::Rest;

    {{#operation}}
    Routes::{{httpMethod}}(control_router, base + "{{{vendorExtensions.x-codegen-iovnet-router-path}}}", Routes::bind(&{{classname}}::{{operationIdSnakeCase}}_handler, this));
    {{/operation}}
}

{{#operation}}
void {{classname}}::{{operationIdSnakeCase}}_handler(const iovnet::service::Rest::Request &request, iovnet::service::HttpHandleResponse &response) {
    {{#hasPathParams}}
    // Getting the path params
    {{#pathParams}}
    auto {{paramName}} = request.param(":{{paramName}}").as<{{dataType}}>();
    {{/pathParams}}
    {{/hasPathParams}}
    {{#hasBodyParam}}
    // Getting the body param
    {{#bodyParam}}
    {{^isPrimitiveType}}
    {{baseType}} {{paramName}};
    {{/isPrimitiveType}}
    {{#isPrimitiveType}}
    {{dataType}} {{paramName}};
    {{/isPrimitiveType}}
    {{/bodyParam}}
    {{/hasBodyParam}}
    {{#vendorExtensions.x-is-list}}

    #define NODE_IS_LIST_CONTAINER
    {{/vendorExtensions.x-is-list}}
    {{#responses}}
    {{^primitiveType}}
    using iovnet::service::HelpType;
    nlohmann::json val = nlohmann::json::object();
    if (request.help_type() != HelpType::NO_HELP) {
      switch (request.help_type()) {
        case HelpType::SHOW:
          #ifdef NODE_IS_LIST_CONTAINER
          val["params"] = {{baseType}}::getKeys();
          val["elements"] = {{operationIdSnakeCase}}_get_list();
          #else // element is complex
          val["params"] = {{baseType}}::getElements();
          #endif
        break;

        case HelpType::ADD:
          #ifdef NODE_IS_LIST_CONTAINER
          val["params"] = {{baseType}}::getKeys();
          #else
          response.send(iovnet::service::Http::Code::Bad_Request);
          return;
          #endif
        break;

        case HelpType::SET:
          #ifndef NODE_IS_LIST_CONTAINER
          val["params"] = {{baseType}}::getWritableLeafs();
          # else
          response.send(iovnet::service::Http::Code::Bad_Request);
          return;
          #endif
        break;

        case HelpType::DEL:
          #ifdef NODE_IS_LIST_CONTAINER
          val["params"] = {{baseType}}::getKeys();
          val["elements"] = {{operationIdSnakeCase}}_get_list();
          #else
          response.send(iovnet::service::Http::Code::Bad_Request);
          return;
          #endif
        break;

        case HelpType::NONE:
          #ifdef NODE_IS_LIST_CONTAINER
          auto cmds = {"add", "del", "show"};
          val["commands"] = cmds;
          val["params"] = {{baseType}}::getKeys();
          val["elements"] = {{operationIdSnakeCase}}_get_list();
          #else // complex type
          auto cmds = {"set", "show"};
          val["commands"] = cmds;
          val["params"] = {{baseType}}::getComplexElements();
          #endif
        break;
      }
      response.send(iovnet::service::Http::Code::Ok, val.dump(4));
      return;
    }
    {{/primitiveType}}
    {{/responses}}
    {{#vendorExtensions.x-is-list}}
    #undef NODE_IS_LIST_CONTAINER
    {{/vendorExtensions.x-is-list}}

    try {
    {{#hasBodyParam}}
    {{#bodyParam}}
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    {{^isPrimitiveType}}
      {{paramName}}.fromJson(request_body);
    {{/isPrimitiveType}}
    {{#isPrimitiveType}}
      // The conversion is done automatically by the json library
      {{paramName}} = request_body;
    {{/isPrimitiveType}}
    {{/bodyParam}}
    {{/hasBodyParam}}
      {{operationIdSnakeCase}}({{#allParams}}{{paramName}}, {{/allParams}} response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(iovnet::service::Http::Code::Bad_Request, e.what());
    }
}

{{/operation}}

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
