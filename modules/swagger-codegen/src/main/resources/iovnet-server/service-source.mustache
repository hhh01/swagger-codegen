{{>licenseInfo}}

#include "{{serviceNameCamelCase}}.h"
#include "{{serviceNameCamelCase}}_dp.h"

{{serviceNameCamelCase}}::{{serviceNameCamelCase}}(const std::string &name, {{serviceNameCamelCase}}Schema &conf)
    : IOModule(name, {{serviceNameLowerCase}}_code) {
  /*
   * This contructor should perform all the initialization of the service
   * instance.The conf object contains the initial contiguration that should
   * be used to intitialize the instance.  The values configured by default
   * should also be saved on this object.
   */

   // TODO: Not sure where to implement this call, here or in the API
   conf.setUuid(get_uuid().str());
}

{{serviceNameCamelCase}}::~{{serviceNameCamelCase}}() {}

/*
 * This function is called by the framework when a request for adding a port
 * is received.  The user should call the IOModule::add_port() function to
 * add the port in the iomodule.  If an error is found an exeption should be
 * raised.
 * The port parameter contains the initial configuration that should be applied
 * the port
 */
PortsSchema {{serviceNameCamelCase}}::add_port(const std::string &port_name, const PortsSchema &port) {
  // Implement here the controls before adding the port

  // This call adds the port to the iomodule
  auto p = IOModule::add_port(port_name);
  // p represents the new created port, see the documentation about it to
  // get more details

  // Configure the port according to the port parameter

  PortsSchema portsSchema;
  portsSchema.setName(port_name);
  portsSchema.setUuid(p.uuid().str());
  // Fill other parameters in the portSchema object
  return portsSchema;
}

void {{serviceNameCamelCase}}::remove_port(const std::string &port_name) {
  // Implement here the logic before removing the port
  IOModule::remove_port(port_name);
  // Implement here the logic after the port has been removed
}

void {{serviceNameCamelCase}}::packet_in(Port &port, PacketInMetadata &md, const std::vector<uint8_t> &packet) {
  // Implement here the logic for handling a packet in the slow path, if
  // the service does not implement a slowpath then leave this function empty
}
