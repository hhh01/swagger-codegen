{{>licenseInfo}}
{{#models}}{{#model}}

#include "{{classname}}.h"

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{classname}}::{{classname}}() {
    {{#vars}}{{#isNotContainer}}{{#isPrimitiveType}}m_{{name}} = {{{defaultValue}}};
    {{/isPrimitiveType}}{{^isPrimitiveType}}{{#isString}}m_{{name}} = {{{defaultValue}}};
    {{/isString}}{{#isDateTime}}m_{{name}} = {{{defaultValue}}};
    {{/isDateTime}}{{/isPrimitiveType}}{{/isNotContainer}}{{^required}}m_{{name}}IsSet = false;
    {{/required}}{{/vars}}
}

{{classname}}::~{{classname}}() {}

void {{classname}}::validate() {
    // TODO: implement validation
}

nlohmann::json {{classname}}::toJson() const {
    nlohmann::json val = nlohmann::json::object();

    {{#vars}}{{#isPrimitiveType}}{{^isListContainer}}{{^required}}if(m_{{name}}IsSet) {
        val["{{baseName}}"] = m_{{name}};
    }

    {{/required}}{{#required}}val["{{baseName}}"] = m_{{name}};
    {{/required}}{{/isListContainer}}{{/isPrimitiveType}}{{#isListContainer}}
    {
      nlohmann::json jsonArray;
      for (auto& item : m_{{name}}) {
        jsonArray.push_back(ModelBase::toJson(item));
      }
      {{#required}}val["{{baseName}}"] = jsonArray;
      {{/required}}{{^required}}
      if (jsonArray.size() > 0) {
        val["{{baseName}}"] = jsonArray;
      }
      {{/required}}
    }
    {{/isListContainer}}{{^isListContainer}}{{^isPrimitiveType}}{{^required}}if(m_{{name}}IsSet) {
        val["{{baseName}}"] = ModelBase::toJson(m_{{name}});
    }
    {{/required}}{{#required}}val["{{baseName}}"] = ModelBase::toJson(m_{{name}});
    {{/required}}{{/isPrimitiveType}}{{/isListContainer}}{{/vars}}

    return val;
}

void {{classname}}::fromJson(nlohmann::json& val) {
    {{#vars}}
    {{#isPrimitiveType}}{{^isListContainer}}
    {{^required}}
    if (val.find("{{baseName}}") != val.end()) {
        {{setter}}(val.at("{{baseName}}"));
    }
    {{/required}}
    {{#required}}
    {{setter}}(val.at("{{baseName}}"));
    {{/required}}{{/isListContainer}}
    {{/isPrimitiveType}}
    {{#isListContainer}}
    m_{{name}}.clear();
    for (auto& item : val["{{baseName}}"]) {
        {{#isPrimitiveType}}m_{{name}}.push_back(item);
        {{/isPrimitiveType}}{{^isPrimitiveType}}{{#items.isString}}m_{{name}}.push_back(item);
        {{/items.isString}}{{^items.isString}}{{#items.isDateTime}}m_{{name}}.push_back(item);
        {{/items.isDateTime}}{{^items.isDateTime}}
        {{{items.datatype}}} newItem;
        newItem.fromJson(item);
        m_{{name}}.push_back(newItem);
        {{/items.isDateTime}}{{/items.isString}}{{/isPrimitiveType}}
    }
    {{/isListContainer}}
    {{^isListContainer}}{{^isPrimitiveType}}{{^required}}
    if (val.find("{{baseName}}") != val.end()) {
        {{#isString}}{{setter}}(val.at("{{baseName}}"));
        {{/isString}}{{^isString}}{{#isDateTime}}{{setter}}(val.at("{{baseName}}"));
        {{/isDateTime}}{{^isDateTime}}
        if (!val["{{baseName}}"].is_null()) {
            {{{datatype}}} newItem;
            newItem.fromJson(val["{{baseName}}"]);
            {{setter}}(newItem);
        }
        {{/isDateTime}}{{/isString}}
    }
    {{/required}}{{#required}}{{#isString}}{{setter}}(val.at("{{baseName}}"));
    {{/isString}}{{^isString}}{{#isDateTime}}{{setter}}(val.at("{{baseName}}"));
    {{/isDateTime}}{{/isString}}{{/required}}{{/isPrimitiveType}}{{/isListContainer}}
    {{/vars}}
}

nlohmann::json {{classname}}::getKeys() {
    nlohmann::json val = nlohmann::json::object();

    {{#vars}}
    {{#vendorExtensions.x-is-key}}
    val["{{baseName}}"]["name"] = "{{baseName}}";
    val["{{baseName}}"]["type"] = "key";
    {{#isString}}
    val["{{baseName}}"]["simpletype"] = "string";
    {{/isString}}
    {{#isInteger}}
    val["{{baseName}}"]["simpletype"] = "integer";
    {{/isInteger}}
    {{#isBoolean}}
    val["{{baseName}}"]["simpletype"] = "boolean";
    {{/isBoolean}}
    val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
    val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
    {{/vendorExtensions.x-is-key}}
    {{/vars}}

    return val;
}

nlohmann::json {{classname}}::getElements() {
    nlohmann::json val = nlohmann::json::object();

    {{#vars}}
    {{^vendorExtensions.x-is-key}}
    val["{{baseName}}"]["name"] = "{{baseName}}";
    val["{{baseName}}"]["type"] = "leaf"; // Suppose that type is leaf
    {{#isListContainer}}
    val["{{baseName}}"]["type"] = "list";
    {{/isListContainer}}
    {{#isString}}
    val["{{baseName}}"]["simpletype"] = "string";
    {{/isString}}
    {{#isInteger}}
    val["{{baseName}}"]["simpletype"] = "integer";
    {{/isInteger}}
    {{#isBoolean}}
    val["{{baseName}}"]["simpletype"] = "boolean";
    {{/isBoolean}}
    val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
    val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
    val["{{baseName}}"]["jsonSchema"] = nlohmann::json::parse(R"IOVNET({{{jsonSchema}}})IOVNET");
    {{/vendorExtensions.x-is-key}}
    {{/vars}}

    return val;
}

nlohmann::json {{classname}}::getWritableLeafs() {
    nlohmann::json val = nlohmann::json::object();

    {{#vars}}
    {{^vendorExtensions.x-is-key}}
    {{^isReadOnly}}
    {{#isPrimitiveType}}
    val["{{baseName}}"]["name"] = "{{baseName}}";
    {{#isString}}
    val["{{baseName}}"]["simpletype"] = "string";
    {{/isString}}
    {{#isInteger}}
    val["{{baseName}}"]["simpletype"] = "integer";
    {{/isInteger}}
    {{#isBoolean}}
    val["{{baseName}}"]["simpletype"] = "boolean";
    {{/isBoolean}}
    val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
    val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
    val["{{baseName}}"]["jsonSchema"] = nlohmann::json::parse(R"IOVNET({{{jsonSchema}}})IOVNET");
    {{/isPrimitiveType}}
    {{/isReadOnly}}
    {{/vendorExtensions.x-is-key}}
    {{/vars}}

    return val;
}

nlohmann::json {{classname}}::getComplexElements() {
    nlohmann::json val = nlohmann::json::object();

    {{#vars}}
    {{^isPrimitiveType}}
    val["{{baseName}}"]["name"] = "{{baseName}}";
    {{#isListContainer}}
    val["{{baseName}}"]["type"] = "list";
    {{/isListContainer}}
    {{^isListContainer}}
    val["{{baseName}}"]["type"] = "complex";
    {{/isListContainer}}
    val["{{baseName}}"]["description"] = R"IOVNET({{{description}}})IOVNET";
    val["{{baseName}}"]["example"] = R"IOVNET({{{example}}})IOVNET";
    {{/isPrimitiveType}}
    {{/vars}}

    return val;
}

{{#vars}}{{^isNotContainer}}{{{datatype}}}& {{classname}}::{{getter}}() {
    return m_{{name}};
}

{{/isNotContainer}}{{#isNotContainer}}{{{datatype}}} {{classname}}::{{getter}}() const {
    return m_{{name}};
}

void {{classname}}::{{setter}}({{{datatype}}} value) {
    m_{{name}} = value;
    {{^required}}m_{{name}}IsSet = true;{{/required}}
}
{{/isNotContainer}}

{{^required}}bool {{classname}}::{{baseName}}IsSet() const {
    return m_{{name}}IsSet;
}

void {{classname}}::unset{{name}}() {
    m_{{name}}IsSet = false;
}
{{/required}}
{{/vars}}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

{{/model}}
{{/models}}
