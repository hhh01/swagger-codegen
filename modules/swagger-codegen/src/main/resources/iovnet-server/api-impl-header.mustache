{{>licenseInfo}}

{{#operations}}/*
* {{classname}}Impl.h
*
* {{description}}
*/

#pragma once

#include "{{classname}}.h"
#include <iovnet/services/manager.h>

{{{defaultInclude}}}
#include <memory>
#include <map>
#include "{{classVarName}}.h"

{{#imports}}{{{import}}}
{{/imports}}

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};
using namespace iovnet::service;

class {{classname}}Impl : public {{apiNamespace}}::{{classname}},
    public ManagementInterface {
public:
    {{classname}}Impl();
    ~{{classname}}Impl() { };
    void control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) override;

    {{#operation}}
    void {{operationIdSnakeCase}}({{#allParams}}const {{#isPrimitiveType}}{{{dataType}}}{{/isPrimitiveType}}{{^isPrimitiveType}}{{{baseType}}}{{/isPrimitiveType}} &{{paramName}},{{/allParams}} HttpHandleResponse &response);
    {{#vendorExtensions.x-is-list}}
    {{#responses}}
    {{^primitiveType}}
    std::vector<std::string> {{operationIdSnakeCase}}_get_list();
    {{/primitiveType}}
    {{/responses}}
    {{/vendorExtensions.x-is-list}}
    {{/operation}}

private:
    std::unordered_map<std::string, {{baseName}}> iomodules;
    {{baseName}} &get_iomodule(const std::string &name);
};

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
