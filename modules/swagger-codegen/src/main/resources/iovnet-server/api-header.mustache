{{>licenseInfo}}
{{#operations}}/*
 * {{classname}}.h
 *
{{!! * {{description}}
 */

#ifndef {{classname}}_H_
#define {{classname}}_H_

{{{defaultInclude}}}
#include <iovnet/services/http_router.h>
#include <vector>

{{#imports}}{{{import}}}
{{/imports}}

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

class {{declspec}} {{classname}} {
public:
    {{classname}}();
    virtual ~{{classname}}() {};

    const std::string base = "{{basePathWithoutHost}}";

protected:
    void setupRoutes();

    {{#operation}}
    void {{operationIdSnakeCase}}_handler(const iovnet::service::Rest::Request &request, iovnet::service::HttpHandleResponse &response);
    {{/operation}}

    iovnet::service::Rest::Router control_router;

    {{#operation}}
    /// <summary>
    /// {{summary}}
    /// </summary>
    /// <remarks>
    /// {{notes}}
    /// </remarks>
    {{#allParams}}
    /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
    {{/allParams}}
    virtual void {{operationIdSnakeCase}}({{#allParams}}const {{#isPrimitiveType}}{{{dataType}}}{{/isPrimitiveType}}{{^isPrimitiveType}}{{{baseType}}}{{/isPrimitiveType}} &{{paramName}}, {{/allParams}} iovnet::service::HttpHandleResponse &response) = 0;
    {{#vendorExtensions.x-is-list}}
    {{#responses}}
    {{^primitiveType}}
    virtual std::vector<std::string> {{operationIdSnakeCase}}_get_list() = 0;
    {{/primitiveType}}
    {{/responses}}
    {{/vendorExtensions.x-is-list}}
    {{/operation}}
};

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

#endif /* {{classname}}_H_ */

{{/operations}}
