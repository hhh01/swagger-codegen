{{>licenseInfo}}
{{#operations}}

#include "{{classname}}Impl.h"

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

{{classname}}Impl::{{classname}}Impl() {}

void {{classname}}Impl::control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) {
    auto s = control_router.route(request, response);
    if (s == Rest::Router::Status::NotFound) {
      response.send(Http::Code::Not_Found);
    }
}

/*
 * These functions include a default basic implementation.  The user could
 * extend adapt this implementation to his needs.
 */

{{baseName}} &{{classname}}Impl::get_iomodule(const std::string &name) {
  try {
    return iomodules.at(name);
  } catch (std::exception e) {
    std::cout << e.what() << std::endl;
    throw std::runtime_error("IOModule " + name + " does not exist");
  }
}

void {{classname}}Impl::create_{{classVarName}}_by_id(
    const std::string &name, const {{baseName}}Schema &schema,
    HttpHandleResponse &response) {
  if (iomodules.count(name) != 0) {
    throw std::runtime_error("There is already an IOModule with name " + name);
  }

  std::unordered_map<std::string, {{baseName}}>::iterator iter;
  bool inserted;

  std::tie(iter, inserted) = iomodules.emplace(std::piecewise_construct,
                                               std::forward_as_tuple(name),
                                               std::forward_as_tuple(name));
  {{baseName}} &m = iter->second;
  {{baseName}}Schema reply(schema);
  reply.setUuid(m.get_uuid().str());
  response.send(Http::Code::Ok, reply.toJson().dump(4));
}

void {{classname}}Impl::delete_{{classVarName}}_by_id(
    const std::string &name, HttpHandleResponse &response) {
  if (iomodules.count(name) == 0) {
    throw std::runtime_error("IOModule " + name + " does not exist");
  }
  iomodules.erase(name);
  response.send(Http::Code::Ok);
}

void {{classname}}Impl::read_{{classVarName}}_uuid_by_id(
    const std::string &name, HttpHandleResponse &response) {
  {{baseName}} &m = get_iomodule(name);
  response.send(Http::Code::Ok, nlohmann::json(m.get_uuid().str()).dump(4));
}

void {{classname}}Impl::read_{{classVarName}}_list_by_id(HttpHandleResponse &response) {
  response.send(Http::Code::Not_Implemented, "Method not implemented");
}

std::vector<std::string> {{classname}}Impl::read_{{classVarName}}_list_by_id_get_list() {
  std::vector<std::string> modules;
  for (auto &x : iomodules) {
    modules.push_back(x.first);
  }
  return modules;
}

/*
 * Ports list related functions
 */
void {{classname}}Impl::create_{{classVarName}}_ports_list_by_id(
    const std::string &name, const PortsSchema &ports,
    HttpHandleResponse &response) {
  response.send(Http::Code::Not_Implemented, "Method not implemented");
}

void {{classname}}Impl::read_{{classVarName}}_ports_list_by_id(
    const std::string &name, HttpHandleResponse &response) {
  response.send(Http::Code::Not_Implemented, "Method not implemented");
}

void {{classname}}Impl::update_{{classVarName}}_ports_list_by_id(
    const std::string &name, const PortsSchema &ports,
    HttpHandleResponse &response) {
  response.send(Http::Code::Not_Implemented, "Method not implemented");
}

void {{classname}}Impl::delete_{{classVarName}}_ports_list_by_id(
    const std::string &name, HttpHandleResponse &response) {
  response.send(Http::Code::Not_Implemented, "Method not implemented");
}

std::vector<std::string> {{classname}}Impl::read_{{classVarName}}_ports_list_by_id_get_list() {
    return std::vector<std::string>();
}

/*
 * Ports related functions
 */
void {{classname}}Impl::create_{{classVarName}}_ports_by_id(
    const std::string &name, const std::string &portsName,
    const PortsSchema &ports, HttpHandleResponse &response) {
  {{baseName}} &m = get_iomodule(name);
  auto p = m.add_port(portsName);

  // TODO: configure port

  PortsSchema reply(ports);
  // TODO: fill reply with parameters
  reply.setName(p.name());
  reply.setUuid(p.uuid().str());
  response.send(Http::Code::Ok, reply.toJson().dump(4));
}

void {{classname}}Impl::read_{{classVarName}}_ports_by_id(
    const std::string &name, const std::string &portsName,
  HttpHandleResponse &response) {
  response.send(Http::Code::Not_Implemented, "Method not implemented");
}

void {{classname}}Impl::update_{{classVarName}}_ports_by_id(
    const std::string &name, const std::string &portsName,
    const PortsSchema &ports, HttpHandleResponse &response) {
  response.send(Http::Code::Not_Implemented, "Method not implemented");
}

void {{classname}}Impl::delete_{{classVarName}}_ports_by_id(
    const std::string &name, const std::string &portsName,
    HttpHandleResponse &response) {
  {{baseName}} &m = get_iomodule(name);
  m.remove_port(portsName);
  response.send(Http::Code::Ok);
}

void {{classname}}Impl::read_{{classVarName}}_ports_peer_by_id(
    const std::string &name, const std::string &portsName,
    HttpHandleResponse &response) {
  {{baseName}} &m = get_iomodule(name);
  auto p = m.get_port(portsName);
  response.send(Http::Code::Ok, nlohmann::json(p.peer()).dump(4));
}

void {{classname}}Impl::read_{{classVarName}}_ports_status_by_id(
    const std::string &name, const std::string &portsName,
  HttpHandleResponse &response) {
  response.send(Http::Code::Not_Implemented, "Method not implemented");
}

void {{classname}}Impl::read_{{classVarName}}_ports_uuid_by_id(
    const std::string &name, const std::string &portsName,
    HttpHandleResponse &response) {
  {{baseName}} &m = get_iomodule(name);
  auto p = m.get_port(portsName);
  response.send(Http::Code::Ok, nlohmann::json(p.uuid().str()).dump(4));
}

void {{classname}}Impl::update_{{classVarName}}_ports_peer_by_id(
    const std::string &name, const std::string &portsName,
    const std::string &peer, HttpHandleResponse &response) {
  {{baseName}} &m = get_iomodule(name);
  auto p = m.get_port(portsName);
  p.set_peer(peer);
  response.send(Http::Code::Ok);
}

void {{classname}}Impl::update_{{classVarName}}_ports_status_by_id(
    const std::string &name, const std::string &portsName,
    const std::string &status, HttpHandleResponse &response) {
  response.send(Http::Code::Not_Implemented, "Method not implemented");
}

/*
 * These functions do not include a default implementation and should be
 * implemented by the user
 */

{{#operation}}
{{^vendorExtensions.x-has-default-impl}}
/**
* @name    {{operationId}}
* @brief   {{summary}}
*
* {{notes}}
*
* URL: {{httpMethod}} {{path}}
*
{{#allParams}}
* @param[in] {{paramName}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
{{/allParams}}
*
* Responses:
{{#responses}}
* {{code}} {{message}}{{#baseType}} -> Return type: {{baseType}}{{/baseType}}
{{/responses}}
*/
void {{classname}}Impl::{{operationIdSnakeCase}}({{#allParams}}const {{#isPrimitiveType}}{{{dataType}}}{{/isPrimitiveType}}{{^isPrimitiveType}}{{{baseType}}}{{/isPrimitiveType}} &{{paramName}}, {{/allParams}} HttpHandleResponse &response) {
    response.send(Http::Code::Not_Implemented, "Method not implemented");
}

{{#vendorExtensions.x-is-list}}
{{#responses}}
{{^primitiveType}}
std::vector<std::string> {{classname}}Impl::{{operationIdSnakeCase}}_get_list() {
    return std::vector<std::string>();
}
{{/primitiveType}}
{{/responses}}
{{/vendorExtensions.x-is-list}}
{{/vendorExtensions.x-has-default-impl}}
{{/operation}}

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
