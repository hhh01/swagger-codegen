{{>licenseInfo}}
{{#operations}}

#include "{{classname}}Impl.h"

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

{{classname}}Impl::{{classname}}Impl(): Manager<{{baseName}}>() {}

void {{classname}}Impl::control_handler(const HttpHandleRequest &request, HttpHandleResponse &response) {
    auto s = control_router.route(request, response);
    if (s == Rest::Router::Status::NotFound) {
      response.send(Http::Code::Not_Found);
    }
}

{{#operation}}

/**
* @name    {{operationId}}
* @brief   {{summary}}
*
* {{notes}}
*
* URL: {{httpMethod}} {{path}}
*
{{#allParams}}
* @param[in] {{paramName}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
{{/allParams}}
*
* Responses:
{{#responses}}
* {{code}} {{message}} {{#baseType}}-> Return type: {{baseType}}{{/baseType}}
{{/responses}}
*/
void {{classname}}Impl::{{operationIdSnakeCase}}({{#allParams}}const {{#isPrimitiveType}}{{{dataType}}}{{/isPrimitiveType}}{{^isPrimitiveType}}{{{baseType}}}{{/isPrimitiveType}} &{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}, HttpHandleResponse &response) {
    response.send(Http::Code::Not_Implemented, "Method not implemented\n");
}
{{/operation}}

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
